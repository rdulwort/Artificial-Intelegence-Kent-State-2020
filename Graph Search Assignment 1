// Reece Dulworth
// 9/20/2020
// C++ program that implements BFS and DFS search capabilities of a graph assuming 
// all the edges on the graph go both ways and the distance between each node is constant
#include<iostream> 
#include <list> 

using namespace std;

class Graph
{
public:
	Graph(int V);						// Constructor 
	void addEdge(int x, int y);			// function to add an edge to graph 
	void BFS(int s);					// prints BFS traversal from a given source s 
	void DFSUtil(int v, bool visited[]);// A recursive function used by DFS
	void DFS(int s);					// DFS traversal of the vertices reachable from v
private:
	int V;								// No. of vertices 
	list<int> *adj;						// Pointer to an array containing adjacency lists
};
Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}
void Graph::addEdge(int x, int y)
{
	adj[x].push_back(y); // Add w to vâ€™s list and vice versa. 
	adj[y].push_back(x);
}
void Graph::BFS(int s)
{
	bool *visited = new bool[V];
	for (int i = 0; i < V; i++) // Mark all the vertices as not visited 
	{
		visited[i] = false; 
	}

	list<int> queue; 
	visited[s] = true; // Mark the current node as visited and enqueue it 
	queue.push_back(s);

	list<int>::iterator i;
	while (!queue.empty())
	{
		s = queue.front(); // Dequeue a vertex from queue and print it 
		cout << s << " ";
		queue.pop_front();

		// Get all adjacent vertices of the dequeued vertex s.
		// If a adjacent has not been visited, then mark it visited and enqueue it 
		for (i = adj[s].begin(); i != adj[s].end(); ++i)
		{
			if (!visited[*i])
			{
				visited[*i] = true;
				queue.push_back(*i);
			}
		}
	}
}
void Graph::DFSUtil(int v, bool visited[])
{
	visited[v] = true; // Mark the current node as visited and print it 
	cout << v << " ";

	list<int>::iterator i; 
	for (i = adj[v].begin(); i != adj[v].end(); ++i) // Recur for all the vertices adjacent to this vertex 
	{ 
		if (!visited[*i])
		{ 
			DFSUtil(*i, visited);
		}
	}
}
void Graph::DFS(int v)
{
	bool *visited = new bool[V]; 
	for (int i = 0; i < V; i++) // Mark all the vertices as not visited 
	{
		visited[i] = false;
	}
	DFSUtil(v, visited); // Call the recursive helper function to print DFS traversal
}
int main()
{
	Graph g(6);
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 2);
	g.addEdge(1, 3);
	g.addEdge(2, 3);
	g.addEdge(2, 4);
	g.addEdge(3, 4);
	g.addEdge(3, 5);
	g.addEdge(4, 5);

	cout << "Following is Breadth First Traversal (starting from vertex 5)" << endl;
	g.BFS(5);
	cout << endl;
	cout << "Following is Depth First Traversal (starting from vertex 5)" << endl;
	g.DFS(5);
	cout << endl;

	system("pause");
	return 0;
}
